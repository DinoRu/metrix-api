name: CI/CD - FastAPI to VPS (no registry)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-metrix-main
  cancel-in-progress: true

jobs:
  ci-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- CI rapide (facultatif mais recommandé) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-

      - name: Install deps (CI only)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8
      - name: Lint
        run: flake8 app || true
      - name: Tests
        run: pytest -q || true
      # --- fin CI ---

      # Déploiement sur le VPS : on build/relance localement au VPS, pas de registry
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            PROJECT_DIR="/opt/metrix"
            cd "$PROJECT_DIR"

            echo "[1/6] Fetch + reset to origin/main"
            git fetch --all
            git checkout main
            git reset --hard origin/main

            echo "[2/6] Pull bases (postgres, redis, nginx) pour maj security"
            docker compose -f docker-compose.yml pull db redis nginx || true

            echo "[3/6] Construire et relancer (sans registre)"
            # --build reconstruit api/celery/flower/migrate à partir du Dockerfile local
            docker compose -f docker-compose.yml up -d --build --remove-orphans

            echo "[4/6] Attendre que la DB soit healthy"
            for i in $(seq 1 60); do
              if docker compose -f docker-compose.yml exec -T db sh -lc 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"'; then
                echo "DB is ready."
                break
              fi
              sleep 2
              if [ "$i" -eq 60 ]; then
                echo "DB not ready after timeout." >&2
                docker compose -f docker-compose.yml logs db | tail -n 200 || true
                exit 1
              fi
            done
            

            echo "[5/6] Migration (one-shot)"
            # On force la migration dans un conteneur éphémère
            docker compose -f docker-compose.yml run --rm migrate

            echo "[6/6] Nettoyage"
            docker image prune -f || true
            docker builder prune -f || true

            echo "✅ Deployed"
