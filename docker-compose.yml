# Docker Compose configuration for the application stack
services:
  # FastAPI application service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    env_file:
      - ./app/.env
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 20s

  # Celery worker for background tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A app.core.celery_app worker --loglevel=INFO
    restart: unless-stopped
    env_file:
      - ./app/.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    networks:
      - app-network

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat
    command: celery -A app.core.celery_app beat --loglevel=INFO
    restart: unless-stopped
    env_file:
      - ./app/.env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    networks:
      - app-network

  # Service utilitaire : on n'en fait pas un service permanent
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: migrate
    entrypoint: ["/bin/sh", "-c"]
    command: ["alembic upgrade head"]
    env_file:
      - ./app/.env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    networks:
      - app-network

  # PostgreSQL database
  db:
    image: postgres:17
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Celery Flower for task monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower
    command: celery -A app.core.celery_app flower --port=5555 --address=0.0.0.0
    restart: unless-stopped
    env_file:
      - ./app/.env
    ports:
      - "5555:5555"
    depends_on:
      redis:
        - condition: service_healthy
      api:
        - condition: service_healthy
    networks:
      - app-network

  # Redis for caching and Celery backend
  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      api:
        - condition: service_healthy
      flower:
        - condition: service_healthy
    networks:
      - app-network

# Persistent volumes
volumes:
  postgres_data:
  redis_data:

# Network configuration
networks:
  app-network:
    driver: bridge